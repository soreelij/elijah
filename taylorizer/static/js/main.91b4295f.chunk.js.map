{"version":3,"sources":["taylor-head.png","TimedComponent.js","TaylorizerOnboarder.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","TimedComponent","_ref","Element","element","Timeout","timeout","_useState","useState","_useState2","Object","slicedToArray","showComponent","setShowComponent","useEffect","setInterval","LyricsInput","props","react_default","a","createElement","type","onChange","handleChange","value","TaylorizerOnboarder","state","renderView","startingLyric","returnedLyrics","clickBtn","e","_this","setState","target","taylorize","console","log","apiUrl","displayFunc","displayLyrics","truncate","encode","$","ajax","url","dataType","success","data","text","lastIndexOf","substring","lyric","replace","RegExp","this","alt","src","require","width","height","index_es","cursor","sequence","wrapper","className","src_TimedComponent","onClick","TaylorizerOnboarder_LyricsInput","Component","App","TaylorizerOnboarder_TaylorizerOnboarder","reportWebVitals","onPerfEntry","Function","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.91b4295f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/taylor-head.1935c937.png\";","import React, { useState, useEffect } from \"react\";\n\nconst TimedComponent = ({element: Element, timeout: Timeout}) => {\n\n    const [showComponent, setShowComponent] = useState(false);\n\n    useEffect(() => {\n        setInterval(() => {\n            setShowComponent(!showComponent);\n        }, Timeout);\n    }, []);\n\n    return (showComponent && Element);\n};\n\nexport default TimedComponent;","import React, { Component } from 'react';\nimport TypeAnimation from 'react-type-animation';\nimport TimedComponent from \"./TimedComponent\";\nimport $ from 'jquery';\n\nconst LyricsInput = props => (\n    <label>\n        <p><strong>Your best lyric:</strong></p>\n        <input\n            type=\"text\"\n            onChange={props.handleChange}\n            value={props.value}\n        />\n    </label>\n)\n\nexport default class TaylorizerOnboarder extends Component {\n\n    state = {\n        renderView: 0,\n        startingLyric: \"\",\n        returnedLyrics: \"\"\n    }\n\n    clickBtn = e => {\n        this.setState({\n            renderView: this.state.renderView += 1\n        });\n    }\n\n    handleChange = e => {\n        this.setState({\n            startingLyric: e.target.value\n        });\n    }\n\n    taylorize = () => {\n\n        this.setState({\n            renderView: 4\n        });\n\n        console.log(\"Taylorizing\");\n\n        var apiUrl = \"https://gpt2-nkxmmqpf7q-uw.a.run.app?length=115&temperature=1.2&top_p=0.9\";\n        var encodedLyric = this.state.startingLyric;\n        let displayFunc = this.displayLyrics;\n        let truncate = this.truncate;\n\n        if (this.state.startingLyric != null) {\n            encodedLyric = this.encode(this.state.startingLyric);\n            apiUrl += \"&prefix=\" + encodedLyric;\n        }\n\n        $.ajax({\n            url: apiUrl,\n            type:'GET',\n            dataType: 'json',\n            success: function(data) {\n                console.log(data.text);\n                displayFunc(truncate(data.text));\n            }\n        });\n\n    }\n\n    displayLyrics = (data) => {\n        this.setState({\n            returnedLyrics: data,\n            renderView: 5\n        })\n    }\n\n   truncate = (data) => {\n        if(data.lastIndexOf(\"\\n\")>0) {\n            return data.substring(0, data.lastIndexOf(\"\\n\"));\n        } else {\n            return data;\n        }\n    }\n\n    encode = (lyric) => {\n        return lyric.replace(new RegExp(\" \", \"g\"), \"%20\");\n    }\n\n    render () {\n        switch(this.state.renderView) {\n            case 1:\n                return <div>\n                    <img alt=\"A cut out of taylor swift's head\" src={require(\"./taylor-head.png\")} width=\"100px\" height=\"100px\" />\n                    <TypeAnimation\n                        cursor={false}\n                        sequence={[\"I'm the Taylorizer.\", 2500, \"I can write Taylor Swift songs.\", 2000]}\n                        wrapper=\"p\"\n                        className=\"type\"\n                    />\n                    <TimedComponent\n                        element={<button onClick={this.clickBtn}>Prove it.</button>}\n                        timeout=\"7000\"\n                    />\n                </div>\n            case 2:\n                return <div>\n                    <img alt=\"A cut out of taylor swift's head\" src={require(\"./taylor-head.png\")} width=\"100px\" height=\"100px\" />\n                    <TypeAnimation\n                        cursor={false}\n                        sequence={[\"You don't believe me?\", 1000, \"I need some ✨inspiration✨.\", 1000, \"You write the first lyric, and I'll handle the rest.\", 1000]}\n                        wrapper=\"p\"\n                        className=\"type\"\n                    />\n                    <TimedComponent />\n                    <TimedComponent\n                        element={\n                            <div>\n                                <br />\n                                <button onClick={this.clickBtn}>OK, Fine</button>\n                            </div>\n                        }\n                        timeout=\"13500\"\n                    />\n                </div>\n            case 3:\n                return <div>\n                    <div>\n                        <div>\n                            <img alt=\"A cut out of taylor swift's head\" src={require(\"./taylor-head.png\")} width=\"100px\" height=\"100px\" />\n                            <LyricsInput handleChange={this.handleChange} value={this.state.startingLyric} />\n                        </div>\n                        <br />\n                        <button onClick={this.taylorize}>Taylorize!</button>\n                    </div>\n                </div>\n            case 4:\n                return <div>\n                    <img alt=\"A cut out of taylor swift's head\" src={require(\"./taylor-head.png\")} width=\"100px\" height=\"100px\" />\n                    <TypeAnimation\n                        cursor={false}\n                        sequence={[\"Really? THAT'S all you could come up with?\", 2000, \"Oh well. Now Taylorizing...\", 2000]}\n                        wrapper=\"p\"\n                        className=\"type\"\n                    />\n                </div>\n            case 5:\n                return <div>\n                    <img alt=\"A cut out of taylor swift's head\" src={require(\"./taylor-head.png\")} width=\"100px\" height=\"100px\" />\n                    <TypeAnimation\n                        cursor={false}\n                        sequence={[\"Our new song is ready.\", 2000]}\n                        wrapper=\"p\"\n                        className=\"type\"\n                    />\n                    <TimedComponent />\n                    <TimedComponent\n                        element={\n                            <div>\n                                <p className=\"break\">\n                                    <strong></strong>\n                                    {this.state.returnedLyrics}\n                                </p>\n                                <p className=\"gray\">\n                                    Want a different song? Refresh the page and try again.\n                                </p>\n                            </div>\n                        }\n                        timeout=\"9500\"\n                    />\n                </div>\n            default:\n                return <div>\n                    <img alt=\"A cut out of taylor swift's head\" src={require(\"./taylor-head.png\")} width=\"100px\" height=\"100px\" />\n                    <p>\n                        Generate Taylor Swift lyrics from an AI using GPT-2\n                    </p>\n                    <button onClick={this.clickBtn}>Get Started</button>\n                </div>\n        }\n    }\n}","import './App.css';\nimport React from 'react'\nimport TaylorizerOnboarder from './TaylorizerOnboarder';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>Taylorizer</h2>\n          <TaylorizerOnboarder />\n          <p className=\"gray\">Created in 2022 by Elijah Sorensen.</p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}